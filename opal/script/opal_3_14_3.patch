diff --git a/make/config.guess b/make/config.guess
index 500ee74b04..f0130fd393 100644
--- a/make/config.guess
+++ b/make/config.guess
@@ -233,6 +233,17 @@ case "${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}" in
     wgrisc:OpenBSD:*:*)
 	echo mipsel-unknown-openbsd${UNAME_RELEASE}
 	exit 0 ;;
+    aarch64:Linux:*:*)
+	echo ${UNAME_MACHINE}-unknown-linux-gnu
+	exit ;;
+    aarch64_be:Linux:*:*)
+	UNAME_MACHINE=aarch64_be
+	echo ${UNAME_MACHINE}-unknown-linux-gnu
+	exit ;;
+    *:Bitrig:*:*)
+	UNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`
+	echo ${UNAME_MACHINE_ARCH}-unknown-bitrig${UNAME_RELEASE}
+	exit ;;
     *:OpenBSD:*:*)
 	echo ${UNAME_MACHINE}-unknown-openbsd${UNAME_RELEASE}
 	exit 0 ;;
diff --git a/plugins/audio/iSAC/iSAC/typedefs.h b/plugins/audio/iSAC/iSAC/typedefs.h
index 472c74b088..fb0bdd3f68 100644
--- a/plugins/audio/iSAC/iSAC/typedefs.h
+++ b/plugins/audio/iSAC/iSAC/typedefs.h
@@ -48,12 +48,22 @@
 #elif defined(__MIPSEL__)
 #define WEBRTC_ARCH_32_BITS
 #define WEBRTC_ARCH_LITTLE_ENDIAN
+#elif defined(__aarch64__)
+#define WEBRTC_ARCH_LITTLE_ENDIAN
+#define WEBRTC_ARCH_ARM_FAMILY
+#define WEBRTC_ARCH_ARM_V8
+#define WEBRTC_ARCH_ARM64
+#define WEBRTC_ARCH_X86_FAMILY
+#define WEBRTC_ARCH_X86_64
+#define WEBRTC_ARCH_PPC
+#define WEBRTC_ARCH_MIPS
 #else
 #error Please add support for your architecture in typedefs.h
 #endif
 
 #if !(defined(WEBRTC_ARCH_LITTLE_ENDIAN) ^ defined(WEBRTC_ARCH_BIG_ENDIAN))
-#error Define either WEBRTC_ARCH_LITTLE_ENDIAN or WEBRTC_ARCH_BIG_ENDIAN
+//#error Define either WEBRTC_ARCH_LITTLE_ENDIAN or WEBRTC_ARCH_BIG_ENDIAN
+#define WEBRTC_ARCH_LITTLE_ENDIAN
 #endif
 
 #if defined(__SSE2__) || defined(_MSC_VER)
diff --git a/plugins/video/MPEG4-ffmpeg/mpeg4.cxx b/plugins/video/MPEG4-ffmpeg/mpeg4.cxx
index c9ed553f2d..74517d1a0e 100644
--- a/plugins/video/MPEG4-ffmpeg/mpeg4.cxx
+++ b/plugins/video/MPEG4-ffmpeg/mpeg4.cxx
@@ -390,11 +390,10 @@ class MPEG4_Encoder : public PluginVideoEncoder<MY_CODEC>, public FFMPEGCodec
       SetEncoderOptions(m_frameTime, m_maxBitRate, m_maxRTPSize, m_tsto, m_keyFramePeriod);
 
       m_context->max_b_frames = 0; /*don't use b frames*/
-      m_context->flags |= CODEC_FLAG_AC_PRED
+      m_context->flags |= AV_CODEC_FLAG_AC_PRED
                     /* | CODEC_FLAG_QPEL */ // don't enable this one: this forces profile_level to advanced simple profile
-                       | CODEC_FLAG_4MV
-                       | CODEC_FLAG_GMC
-                       | CODEC_FLAG_LOOP_FILTER;
+                       | AV_CODEC_FLAG_4MV
+                       | AV_CODEC_FLAG_LOOP_FILTER;
 
       return OpenCodec();
     }
@@ -464,7 +463,7 @@ class MPEG4_Decoder : public PluginVideoDecoder<MY_CODEC>, public FFMPEGCodec
       if (!InitDecoder(AV_CODEC_ID_MPEG4))
         return false;
 
-      m_context->flags |= CODEC_FLAG_4MV;
+      m_context->flags |= AV_CODEC_FLAG_4MV;
 
       return OpenCodec();
     }
diff --git a/plugins/video/common/ffmpeg.cxx b/plugins/video/common/ffmpeg.cxx
index b22ec79d9f..e8e5fbb157 100644
--- a/plugins/video/common/ffmpeg.cxx
+++ b/plugins/video/common/ffmpeg.cxx
@@ -109,7 +109,7 @@ FFMPEGCodec::FFMPEGCodec(const char * prefix, OpalPluginFrame * fullFrame)
   , m_errorCount(0)
   , m_hadMissingPacket(false)
 {
-  avcodec_register_all();
+  //avcodec_register_all();
 
   av_init_packet(&m_packet);
 
@@ -165,7 +165,7 @@ bool FFMPEGCodec::InitContext()
     return false;
   }
 
-  m_context->pix_fmt = PIX_FMT_YUV420P;
+  m_context->pix_fmt = AV_PIX_FMT_YUV420P;
   m_context->workaround_bugs = FF_BUG_AUTODETECT;
 
   // debugging flags
@@ -195,7 +195,7 @@ bool FFMPEGCodec::InitEncoder(AVCodecID codecId)
 {
   PTRACE(5, m_prefix, "Initialising encoder");
 
-  m_codec = avcodec_find_encoder(codecId);
+  m_codec = (AVCodec*) avcodec_find_encoder(codecId);
   if (m_codec == NULL) {
     PTRACE(1, m_prefix, "Codec not found for encoder");
     return false;
@@ -204,11 +204,9 @@ bool FFMPEGCodec::InitEncoder(AVCodecID codecId)
   if (!InitContext())
     return false;
 
-  m_context->rtp_callback = &StaticRTPCallBack;
+  //m_context->rtp_callback = &StaticRTPCallBack;
 
-  m_context->flags = CODEC_FLAG_EMU_EDGE   // don't draw edges
-                    | CODEC_FLAG_TRUNCATED  // Possible missing packets
-                    ;
+  m_context->flags |= AV_CODEC_FLAG_DROPCHANGED;  // Possible missing packets
 
   m_context->mb_decision = FF_MB_DECISION_SIMPLE;    // high quality off
 
@@ -228,7 +226,7 @@ bool FFMPEGCodec::InitEncoder(AVCodecID codecId)
 
 bool FFMPEGCodec::InitDecoder(AVCodecID codecId)
 {
-  if ((m_codec = avcodec_find_decoder(codecId)) == NULL) {
+  if ((m_codec = (AVCodec*) avcodec_find_decoder(codecId)) == NULL) {
     PTRACE(1, m_prefix, "Codec not found for decoder");
     return false;
   }
@@ -292,8 +290,6 @@ bool FFMPEGCodec::SetResolution(unsigned width, unsigned height)
   }
 
   if (m_context != NULL) {
-    if (width > 352)
-      m_context->flags &= ~CODEC_FLAG_EMU_EDGE; // Totally bizarre! FFMPEG crashes if on for CIF4
 
     m_context->width = width;
     m_context->height = height;
@@ -333,7 +329,6 @@ void FFMPEGCodec::SetEncoderOptions(unsigned frameTime,
   m_context->time_base.num = frameTime*m_context->time_base.den/PLUGINCODEC_VIDEO_CLOCK;
 
   m_context->bit_rate = m_context->rc_min_rate = m_context->rc_max_rate = maxBitRate;
-
   // Ratecontrol buffer size, in bits. Usually 0.5-2 second worth. We have 2.
   // 224 kbyte is what VLC uses, and it seems to fix the quantization pulse (at Level 5)
   m_context->rc_buffer_size = maxBitRate*2;
@@ -343,17 +338,18 @@ void FFMPEGCodec::SetEncoderOptions(unsigned frameTime,
   // about half full. Note that setting this after avcodec_open() has
   // no effect.
   m_context->rc_initial_buffer_occupancy = m_context->rc_buffer_size * 1/2;
-
   // And this is set to 1.
   // It seems to affect how aggressively the library will raise and lower
   // quantization to keep bandwidth constant. Except it's in reference to
   // the "vbv buffer", not bits per second, so nobody really knows how
   // it works.
+#if 0
   m_context->rc_buffer_aggressivity = 1.0f;
 
   // This is set to 0 in ffmpeg.c, the command-line utility.
   m_context->rc_initial_cplx = 0.0f;
 
+#endif
   // FFMPEG requires bit rate tolerance to be at least one frame size
   m_context->bit_rate_tolerance = maxBitRate/10;
   int oneFrameBits = (int)((int64_t)m_context->bit_rate*m_context->time_base.num/m_context->time_base.den) + 1;
@@ -368,15 +364,13 @@ void FFMPEGCodec::SetEncoderOptions(unsigned frameTime,
   m_context->max_qdiff = 10;  // was 3      // max q difference between frames
   m_context->qcompress = 0.5;               // qscale factor between easy & hard scenes (0.0-1.0)
 
-  // Lagrange multipliers - this is how the context defaults do it:
-  m_context->lmin = m_context->qmin * FF_QP2LAMBDA;
-  m_context->lmax = m_context->qmax * FF_QP2LAMBDA; 
-
+  
+  int rtp_payload_size;
   if (m_fullFrame == NULL)
-    m_context->rtp_payload_size = maxRTPSize;
+    rtp_payload_size = maxRTPSize;
   else {
     m_fullFrame->SetMaxPayloadSize(maxRTPSize);
-    m_context->rtp_payload_size = (int)m_fullFrame->GetMaxPayloadSize(); // Might be adjusted to smaller value
+    rtp_payload_size = (int)m_fullFrame->GetMaxPayloadSize(); // Might be adjusted to smaller value
   }
 
   m_context->qmax = tsto;
@@ -396,7 +390,7 @@ void FFMPEGCodec::SetEncoderOptions(unsigned frameTime,
   PTRACE(5, m_prefix, "bit_rate_tolerance set to " <<m_context->bit_rate_tolerance);
   PTRACE(5, m_prefix, "qmin set to " << m_context->qmin);
   PTRACE(5, m_prefix, "qmax set to " << m_context->qmax);
-  PTRACE(5, m_prefix, "payload size set to " << m_context->rtp_payload_size);
+  PTRACE(5, m_prefix, "payload size set to " << rtp_payload_size);
 }
 
 
@@ -486,7 +480,24 @@ int FFMPEGCodec::EncodeVideoFrame(uint8_t * frame, size_t length, unsigned & fla
   m_packet.data = frame;
   m_packet.size = (int)length;
   int gotPacket = 0;
-  int result = avcodec_encode_video2(m_context, &m_packet, m_picture, &gotPacket);
+  //int result = avcodec_encode_video2(m_context, &m_packet, m_picture, &gotPacket);
+  int result = 0;
+  int ret = avcodec_send_frame(m_context, m_picture);
+  if (ret < 0){
+    PTRACE(1, m_prefix, "Error Video: sending a frame for encoding");
+    result = -1;
+  }
+  while (ret >= 0 ){
+    ret = avcodec_receive_packet (m_context, &m_packet);
+    if ( (ret == AVERROR(EAGAIN)) | ret == AVERROR_EOF){
+      break;
+    }
+    else if ( ret < 0 ) {
+      PTRACE(1, m_prefix, "Error_video: receiving packet for encoding");
+      break;
+    }
+  }
+
 #endif
 
   if (result < 0) {
@@ -553,6 +564,10 @@ bool FFMPEGCodec::DecodeVideoPacket(const PluginCodec_RTP & in, unsigned & flags
 bool FFMPEGCodec::DecodeVideoFrame(const uint8_t * frame, size_t length, unsigned & flags)
 {
   PTRACE(5, m_prefix, "Decoding " << length << " bytes");
+  if(0 == length ){
+  	PTRACE(4, m_prefix, "Error decoder-video " << length << " bytes");
+	return true;
+  }
 
   int errorsBefore = m_errorCount;
 #ifdef FFMPEG_HAS_DECODE_ERROR_COUNT
@@ -566,7 +581,29 @@ bool FFMPEGCodec::DecodeVideoFrame(const uint8_t * frame, size_t length, unsigne
 #else
   m_packet.data = (uint8_t *)frame;
   m_packet.size = (int)length;
-  int bytesDecoded = avcodec_decode_video2(m_context, m_picture, &gotPicture, &m_packet);
+  //int bytesDecoded = avcodec_decode_video2(m_context, m_picture, &gotPicture, &m_packet);
+  int bytesDecoded = length;
+  int ret = avcodec_send_packet (m_context, &m_packet);
+  if (ret < 0){
+    PTRACE(1, m_prefix, "Error  decoder-video sending a packet for decoding");
+    bytesDecoded = -1;
+  }else{
+    while ( ret >= 0 ) {
+      ret = avcodec_receive_frame(m_context, m_picture);
+      if ( ret == AVERROR (EAGAIN) || ret == AVERROR_EOF)
+        break;
+      else if ( ret <0 ){
+        PTRACE(1, m_prefix, "Error decoder-video during decoding\n");
+        bytesDecoded = -1;
+        gotPicture = 0;
+        break;
+      }
+      gotPicture = 1;
+      bytesDecoded = length;
+      break;
+    }
+  }
+
 #endif
 
   if (bytesDecoded < 0) {
diff --git a/plugins/video/x264/h264-x264.cxx b/plugins/video/x264/h264-x264.cxx
index eb41d2aa6b..aef91cb62d 100644
--- a/plugins/video/x264/h264-x264.cxx
+++ b/plugins/video/x264/h264-x264.cxx
@@ -808,12 +808,7 @@ class H264_Decoder : public PluginVideoDecoder<MY_CODEC>, public FFMPEGCodec
 #else
       m_context->idct_algo = FF_IDCT_AUTO;
 #endif
-      m_context->flags = CODEC_FLAG_INPUT_PRESERVED | CODEC_FLAG_EMU_EDGE;
-      m_context->flags2 =
-#ifdef CODEC_FLAG2_DROP_FRAME_TIMECODE
-                          CODEC_FLAG2_DROP_FRAME_TIMECODE |
-#endif
-                          CODEC_FLAG2_CHUNKS;
+      m_context->flags2 = AV_CODEC_FLAG2_CHUNKS;
 
       if (!OpenCodec())
         return false;
diff --git a/samples/openphone/main.cxx b/samples/openphone/main.cxx
index ff2db3c10e..b615e8e666 100644
--- a/samples/openphone/main.cxx
+++ b/samples/openphone/main.cxx
@@ -98,7 +98,6 @@
 
 #define VIDEO_WINDOW_DRIVER P_SDL_VIDEO_DRIVER
 #define VIDEO_WINDOW_DEVICE P_SDL_VIDEO_PREFIX
-
 #else
 
 #define VIDEO_WINDOW_DRIVER P_MSWIN_VIDEO_DRIVER
diff --git a/src/opal/manager.cxx b/src/opal/manager.cxx
index abaced3feb..ac8578d4e3 100644
--- a/src/opal/manager.cxx
+++ b/src/opal/manager.cxx
@@ -158,7 +158,7 @@ PString OpalGetVersion()
 #define BetaCode    "beta"
 #define ReleaseCode "."
 
-  return psprintf("%u.%u%s%u (svn:%u)", MAJOR_VERSION, MINOR_VERSION, BUILD_TYPE, BUILD_NUMBER, SVN_REVISION);
+  return psprintf("%u.%u%s%u (svn:%u)", MAJOR_VERSION, MINOR_VERSION, BUILD_TYPE, BUILD_NUMBER, 1);
 }
 
 
